{
    "M√≥dulo 6 - Scripts": {
        "Descripci√≥n": {
            "description": "En este m√≥dulo aprender√°s qu√© son los scripts en Python y c√≥mo puedes escribir, ejecutar y organizar tus scripts para que sean reutilizables y eficientes. Tambi√©n aprender√°s a gestionar los argumentos que puedes pasar desde la l√≠nea de comandos y c√≥mo estructurar proyectos Python que incluyan varios scripts interconectados.",
            "content": [
                {
                    "title": "Qu√© es un Script",
                    "text": "Un script es un archivo de c√≥digo que puede ser ejecutado directamente. A diferencia de un programa grande o una aplicaci√≥n, un script es generalmente m√°s corto y est√° dise√±ado para automatizar tareas espec√≠ficas o realizar una operaci√≥n concreta.",
                    "example_code": "print('¬°Este es un script de Python!')",
                    "instructions": "Crea un archivo llamado `mi_script.py`, copia el c√≥digo anterior y ejec√∫talo desde la terminal para ver c√≥mo funciona un script b√°sico en Python.",
                    "example_code_command": "python3 mi_script.py"
                },
                {
                    "title": "Escribiendo un Script Reutilizable",
                    "text": "Un script reutilizable es un script que se puede ejecutar varias veces sin cambios o que puede aceptar par√°metros para realizar tareas ligeramente diferentes. Los scripts reutilizables son fundamentales en proyectos de mayor escala.",
                    "example_code": "def saludar(nombre):\n    print(f'¬°Hola, {nombre}!')\n\nsaludar('Carlos')",
                    "instructions": "Guarda este c√≥digo en un archivo llamado `saludo.py`. Ejecuta el archivo para ver c√≥mo el script puede reutilizar la funci√≥n `saludar` cada vez que se llame.",
                    "example_code_command": "python3 saludo.py"
                },
                {
                    "title": "Ejecutando un Script desde la L√≠nea de Comandos",
                    "text": "Puedes ejecutar un script de Python directamente desde la l√≠nea de comandos. Esto es especialmente √∫til cuando quieres automatizar tareas sin necesidad de abrir un entorno de desarrollo o un editor de c√≥digo.",
                    "example_code": "# Abre una terminal y escribe:\npython3 mi_script.py",
                    "instructions": "Crea un archivo llamado `mi_script_terminal.py`, copia cualquier c√≥digo que desees ejecutar, luego abre una terminal y escribe el comando `python3 mi_script_terminal.py` para ejecutar el script.",
                    "example_code_command": "python3 mi_script_terminal.py"
                },
                {
                    "title": "Argumentos desde la L√≠nea de Comandos",
                    "text": "Los scripts de Python pueden aceptar argumentos que pasas desde la l√≠nea de comandos, lo que te permite hacer que tu script sea m√°s flexible y √∫til. Utilizamos el m√≥dulo `sys` para leer estos argumentos.",
                    "example_code": "import sys\n\n# Imprime el primer argumento pasado desde la terminal\nprint('Argumento recibido:', sys.argv[1])",
                    "instructions": "Crea un archivo llamado `argumentos.py`, copia el c√≥digo, y luego ejecuta el script pasando un argumento desde la terminal con el comando `python3 argumentos.py hola`. Observa c√≥mo el argumento se muestra en la salida.",
                    "example_code_command": "python3 argumentos.py hola"
                },
                {
                    "title": "Scripts con Par√°metros Opcionales",
                    "text": "A veces, un script puede requerir par√°metros opcionales que no siempre necesitas pasar. En esos casos, puedes proporcionar valores predeterminados para los par√°metros que no se reciban.",
                    "example_code": "import sys\n\nnombre = sys.argv[1] if len(sys.argv) > 1 else 'Usuario'\nprint(f'¬°Hola, {nombre}!')",
                    "instructions": "Guarda el c√≥digo en un archivo llamado `parametros.py`. Ejecuta el script con o sin argumentos desde la terminal y observa c√≥mo el script maneja el par√°metro opcional.",
                    "example_code_command": "python3 parametros.py"
                },
                {
                    "title": "Organizando Scripts en Proyectos",
                    "text": "A medida que tus scripts se vuelven m√°s complejos, es una buena idea organizarlos en proyectos con varias carpetas y archivos. Un buen enfoque es tener un archivo principal que se encargue de importar y ejecutar varios scripts seg√∫n sea necesario.",
                    "example_code": "from utils import saludar\n\nsaludar('Mundo')\n\n# Donde utils.py es un script en la misma carpeta que define la funci√≥n saludar",
                    "instructions": "Crea dos archivos: `utils.py` y `proyecto.py`. En `utils.py`, define una funci√≥n llamada `saludar(nombre)` y, en `proyecto.py`, importa la funci√≥n desde `utils` y ll√°mala con el nombre 'Mundo'. Ejecuta el archivo `proyecto.py`.",
                    "example_code_command": "python3 proyecto.py"
                },
                {
                    "title": "Mejorando la Estructura de los Scripts",
                    "text": "Para proyectos m√°s grandes, considera estructurar tus scripts en paquetes, con una carpeta principal que contenga varios m√≥dulos o scripts relacionados. Utiliza `__init__.py` para que Python reconozca la carpeta como un paquete y puedas importar m√≥dulos desde ah√≠.",
                    "example_code": "# Estructura del proyecto\n# üìÅ proyecto/\n# ‚îú‚îÄ‚îÄ üìÅ modulos/\n# ‚îÇ   ‚îú‚îÄ‚îÄ __init__.py\n# ‚îÇ   ‚îú‚îÄ‚îÄ modulo1.py\n# ‚îÇ   ‚îî‚îÄ‚îÄ modulo2.py\n# ‚îî‚îÄ‚îÄ principal.py",
                    "instructions": "Crea una estructura de carpetas similar a la anterior y organiza los scripts en m√≥dulos. Luego, ejecuta el archivo `principal.py` para que importe los m√≥dulos desde la carpeta `modulos`.",
                    "example_code_command": "python3 principal.py"
                }
            ]
        }
    }
}
